Write down some notes for internal implementations.

* Handler Lifecycle
** What is Handler

In erlang code, Handler (a handle term) is a REF to the contexts and they are

- Listener handler

  For accessing l_ctx (Listener Context)

- Connection handler

  For accessing c_ctx (Connection Context)

- Stream handler

  For accessing s_ctx (Stream Context)

`*_ctx` is the NIF resource object in C code, and it has

1. A MsQuic handler (HQUIC) for interworking with MsQuic.
2. A 'is_closed' boolean flag mark if the HQUIC is valid or not.
   If it is false, the HQUIC may become (or is becoming) invalid and it is unsafe to be used for calling MsQuic APIs.
3. ... Other members(fields) are irrelevant here.

** Creation

Creation is the op of allocating NIF resources.

*** Listener handler

Created in quicer_nif:listen/2

*** Connection handler

In init_c_ctx

1. server: ctx is created in listener callback when there is new incoming connection
2. client: ctx is created in quicer_nif:async_connect3/3

*** Stream handler

In init_s_ctx

1. server: ctx is created in conn callback
2. client: ctx is created in quicer_nif:async_start_stream2/2

** Destroy

In erlang vm, if there is a var holding the handler, it will not be garbage collected.

Same as in C NIF code, if the handler is one of the input arguments, it is safe to access the *_ctx because the var in erlang is still holding the handler but we cannot assume the API caller will hold the handler for the entire lifecycle.

** Thread Safety with ref counting.

In C code, the resource object is not deallocated (become *invalid**) until the last handle term is garbage collected by the VM and the resource is released with enif_release_resource (not necessarily in that order).
note, The refcounting is very expensive call.

Access a *invalid* resource object via the pointer could cause SEGFAULT.

In term of thread safety, There are three players in quicer that could access the resource object simultaneously.

a. The MsQuic worker thread is accessing *_ctx in the callback function
b. VM scheduler is executing a NIF function such as quicer:send/2
c. VM scheduler thread is doing GC of the handler object

After the context object is created, the refcnt is 1

1. VM ensures the c) happens last when refcnt is 0.

2. In the nif function that needs to access the resource object:

   +call enif_keep_resource before the access+

   +call enif_release_resource after the access+

   At the time of accessing resource object, the Var is still refereced and it will not be garbage collected.

   It is unnecessary to keep/release the resources.

   Note @TODO, unsure this is still true for the NIF that runs on dirty scheduler.

3. In the nif function that calls the MsQuic API which can cause later accessing resource object in the callback context in the msquic worker thread.

   It is unnecessary to keep/release the resources.

4. In MsQuic callback function when handling the event of 'SHUTDOWN COMPLETE'

   'SHUTDOWN COMPLETE' means resource is no longer active and there will be no more callbacks
   (Connection->ClientCallbackHandler = NULL)

   Callback should decrease the refcnt.

   In callback,
     Call enif_release_resource
     Set msquic Handler to NULL within locking context.
     Msquic API could deal with NULL handler.

5. In MsQuic callback function and NIF function

   When the high-level resource object is created on top of a lower level.

   For example: when a stream is created in a connection, we need to call enif_keep_resource for connection resource object bump the refcnt.

6. Deinit the resource object in resource destruct function ~resource_*_dealloc_callback~

   Call enif_release_resource for corresponding lower-level resource object.

   For instance, when deinit the s_ctx, it should deref the c_ctx.

   Everything contained in the resource object becomes invalid and it will be impossible to access the destructed
   resource obj from a) and b). But for accessing from c) it is out of our control.

   Close the msquic handler.

7. When close the connection via quicer_nif:close_connection3

   Set Connection Handler to NULL within locked context

8. MsQuic callback signaling

   NO-OP

9. @TODO: Catch runtime error signals from msquic
    To not 'crash' the erlang VM. we need some signal handling to handle the runtime error signals from msquic such as runtime assertions and raise an alarm for 'need maintaince'.

    If the resource that links to the error is identical, we could try to mark it blacklisted and deny further access.

*** Connection Client

The connection ctx resource is *created* in NIF quicer:async_connect.

enif_release_resource is called in 'destroy_c_ctx'.

*** Connection Server

The connection ctx resource is *created* in 'ServerListenerCallback'.

enif_release_resource is called in 'destroy_c_ctx'.

*** Stream Client

For the stream init from client
The stream ctx resource is *created* in 'async_start_stream2'.
Client call enif_keep_resource on the connection ctx which it belongs to.

For the stream init from server
The stream ctx resource is *created* in 'ClientConnectionCallback'.
Client call enif_keep_resource on the connection ctx which it belongs to.

enif_release_resource is called in 'destroy_s_ctx'.
enif_release_resource of connection ctx is called in 'destroy_c_ctx'.

*** Stream Server
The stream ctx resource is *created* in 'ServerConnectionCallback'.
Then call enif_keep_resource on the connection ctx which it belongs to.

enif_release_resource is called in 'destroy_s_ctx'.
enif_release_resource of connection ctx is called in 'destroy_c_ctx'.


* MsQuic API Usages

List how we map the API of MsQuic

** API Table
#+begin_src c
typedef struct QUIC_API_TABLE {

    QUIC_SET_CONTEXT_FN                 SetContext;
    QUIC_GET_CONTEXT_FN                 GetContext;
    QUIC_SET_CALLBACK_HANDLER_FN        SetCallbackHandler;

    QUIC_SET_PARAM_FN                   SetParam;
    QUIC_GET_PARAM_FN                   GetParam;

    QUIC_REGISTRATION_OPEN_FN           RegistrationOpen;
    QUIC_REGISTRATION_CLOSE_FN          RegistrationClose;
    QUIC_REGISTRATION_SHUTDOWN_FN       RegistrationShutdown;

    QUIC_CONFIGURATION_OPEN_FN          ConfigurationOpen;
    QUIC_CONFIGURATION_CLOSE_FN         ConfigurationClose;
    QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN
                                        ConfigurationLoadCredential;

    QUIC_LISTENER_OPEN_FN               ListenerOpen;
    QUIC_LISTENER_CLOSE_FN              ListenerClose;
    QUIC_LISTENER_START_FN              ListenerStart;
    QUIC_LISTENER_STOP_FN               ListenerStop;

    QUIC_CONNECTION_OPEN_FN             ConnectionOpen;
    QUIC_CONNECTION_CLOSE_FN            ConnectionClose;
    QUIC_CONNECTION_SHUTDOWN_FN         ConnectionShutdown;
    QUIC_CONNECTION_START_FN            ConnectionStart;
    QUIC_CONNECTION_SET_CONFIGURATION_FN
                                        ConnectionSetConfiguration;
    QUIC_CONNECTION_SEND_RESUMPTION_FN  ConnectionSendResumptionTicket;

    QUIC_STREAM_OPEN_FN                 StreamOpen;
    QUIC_STREAM_CLOSE_FN                StreamClose;
    QUIC_STREAM_START_FN                StreamStart;
    QUIC_STREAM_SHUTDOWN_FN             StreamShutdown;
    QUIC_STREAM_SEND_FN                 StreamSend;
    QUIC_STREAM_RECEIVE_COMPLETE_FN     StreamReceiveComplete;
    QUIC_STREAM_RECEIVE_SET_ENABLED_FN  StreamReceiveSetEnabled;

    QUIC_DATAGRAM_SEND_FN               DatagramSend;

}
#+end_src

** APIs

*** SetContext [Not Used]
*** GetContext [Not Used]
*** SetCallbackHandler
*** SetParam
*** GetParam
*** RegistrationOpen;
*** RegistrationClose;
*** RegistrationShutdown; [Not Used]
*** ConfigurationOpen;
*** ConfigurationClose;
*** ConfigurationLoadCredential;
*** ListenerOpen;
*** ListenerClose;
*** ListenerStart;
*** ListenerStop;
*** ConnectionOpen;
*** ConnectionClose;
*** ConnectionShutdown;
*** ConnectionStart;
*** ConnectionSetConfiguration;
*** ConnectionSendResumptionTicket;

*** StreamOpen;
*** StreamClose;
*** StreamStart;
*** StreamShutdown;
*** StreamSend;
*** StreamReceiveComplete;
*** StreamReceiveSetEnabled;
*** DatagramSend;
